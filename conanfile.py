from conans import ConanFile, CMake, tools
import os

class ColorMyConsole(ConanFile):
    name = "colmc"
    version_major  = 1
    version_minor  = 0
    version_bugfix = 0
    version = str(version_major) + "." + str(version_minor) + "." + str(version_bugfix)
    url = "TODO"
    license = "MIT"
    description = "TODO"
    settings = "os", "compiler", "build_type", "arch"
    generators = "cmake"
    exports_sources = "CMakeLists.txt", "include*", "src*", "LICENSE.txt"
    no_copy_source=True

    def configure_cmake(self):
        cmake = CMake(self)
        cmake.configure()
        return cmake

    def version_file(self):
        return os.path.join(self.build_folder, "include", "colmc", "version.h")

    def build(self):
        version_file_content = ""
        try:
            version_file_content = tools.load(self.version_file())
        except:
            pass
        new_version_file_content = """// (c) 2021 Jens Ganter-Benzing. Licensed under the MIT license.
#ifndef colmc_version_h_INCLUDED
#define colmc_version_h_INCLUDED

// Don't modify this file; it has been generated by conanfile.py

#include <cstdint>

#include <colmc/push_warnings.h>

namespace colmc {{

constexpr std::uint8_t version_major  = {m};
constexpr std::uint8_t version_minor  = {n};
constexpr std::uint8_t version_bugfix = {b};
constexpr char         version_str[]  = "{m}.{n}.{b}";

}}

#include <colmc/pop_warnings.h>

#endif
""".format(m=self.version_major, n=self.version_minor, b=self.version_bugfix)
        if new_version_file_content != version_file_content:
            tools.save(self.version_file(), new_version_file_content)
        cmake = self.configure_cmake()
        args = None
        if self.settings.compiler == "Visual Studio":
            args = ["Thost=x64"] # Use 64 bit compiler/liker host
        cmake.configure(args=args)
        cmake.build()
        
    def package(self):
        self.copy("*.lib", dst="lib", src="lib")
        self.copy("*.a", dst="lib", src="lib")
        self.copy("*.h", dst="include", src="include")
        self.copy("*.h", dst="include", src=os.path.join(self.build_folder, "include"))
        self.copy("LICENSE.txt", dst="license", src="")

    def package_info(self):
        self.cpp_info.libs = ["colmc"];
